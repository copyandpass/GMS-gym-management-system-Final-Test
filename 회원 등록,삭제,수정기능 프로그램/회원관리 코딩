import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

// 회원 클래스
class Member {
    private String name;
    private int age;
    private String membershipType;

    public Member(String name, int age, String membershipType) {
        this.name = name;
        this.age = age;
        this.membershipType = membershipType;
    }

    public String getName() {
        return name;
    }

    public String getMemberInfo() {
        return "이름: " + name + ", 나이: " + age + ", 회원권: " + membershipType;
    }
}

// 회원 관리 GUI 클래스
public class GymMembershipGUI extends JFrame {
    private ArrayList<Member> members = new ArrayList<>();
    private DefaultListModel<String> memberListModel = new DefaultListModel<>();
    private JList<String> memberList = new JList<>(memberListModel);

    public GymMembershipGUI() {
        setTitle("체육관 회원 관리 시스템");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // 상단 패널 (버튼 영역)
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 3));

        JButton addButton = new JButton("회원 등록");
        JButton deleteButton = new JButton("회원 삭제");
        JButton listButton = new JButton("회원 목록 조회");

        buttonPanel.add(addButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(listButton);

        // 중앙 패널 (회원 리스트 표시)
        JScrollPane listScrollPane = new JScrollPane(memberList);
        listScrollPane.setPreferredSize(new Dimension(200, 300));

        // 이벤트 처리
        addButton.addActionListener(e -> addMember());
        deleteButton.addActionListener(e -> deleteMember());
        listButton.addActionListener(e -> listMembers());

        // 프레임에 추가
        add(buttonPanel, BorderLayout.NORTH);
        add(listScrollPane, BorderLayout.CENTER);
    }

    // 회원 등록
    private void addMember() {
        JTextField nameField = new JTextField();
        JTextField ageField = new JTextField();
        JTextField membershipField = new JTextField();

        Object[] message = {
            "이름:", nameField,
            "나이:", ageField,
            "회원권 종류:", membershipField
        };

        int option = JOptionPane.showConfirmDialog(this, message, "회원 등록", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                String name = nameField.getText();
                int age = Integer.parseInt(ageField.getText());
                String membershipType = membershipField.getText();

                if (name.isEmpty() || membershipType.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "모든 필드를 입력해주세요.");
                } else {
                    Member newMember = new Member(name, age, membershipType);
                    members.add(newMember);
                    JOptionPane.showMessageDialog(this, name + "님이 등록되었습니다.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "나이는 숫자로 입력해주세요.");
            }
        }
    }

    // 회원 삭제
    private void deleteMember() {
        String nameToDelete = JOptionPane.showInputDialog(this, "삭제할 회원 이름을 입력하세요:");
        if (nameToDelete != null && !nameToDelete.isEmpty()) {
            boolean found = false;
            for (int i = 0; i < members.size(); i++) {
                if (members.get(i).getName().equalsIgnoreCase(nameToDelete)) {
                    members.remove(i);
                    JOptionPane.showMessageDialog(this, nameToDelete + "님이 삭제되었습니다.");
                    found = true;
                    break;
                }
            }
            if (!found) {
                JOptionPane.showMessageDialog(this, nameToDelete + "님을 찾을 수 없습니다.");
            }
        }
    }

    // 회원 목록 조회
    private void listMembers() {
        memberListModel.clear();
        if (members.isEmpty()) {
            JOptionPane.showMessageDialog(this, "등록된 회원이 없습니다.");
        } else {
            for (Member member : members) {
                memberListModel.addElement(member.getMemberInfo());
            }
        }
    }

    // 프로그램 실행
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            GymMembershipGUI gui = new GymMembershipGUI();
            gui.setVisible(true);
        });
    }
}
